

def build(ctx):
	
	def in_data(*args):
	    return ctx.path_to(ctx, 'IN_DATASET_1', *args)
	
	def out_analysis(*args):
	    return ctx.path_to(ctx, 'OUT_ANALYSIS', *args)
	
	def out_data(*args):
	    return ctx.path_to(ctx, 'OUT_DATA', *args)

	panel_spec = {}
	panel_spec['Table1']={}
	panel_spec['Table1']['Estimates']='est'
	panel_spec['Table1']['Correlations']='corr'
	
	panel_spec['Table2-3']={}
	panel_spec['Table2-3']['Panel A']='1'
	panel_spec['Table2-3']['Panel B']='2'
	panel_spec['Table2-3']['Panel C']='3'
	panel_spec['Table2-3']['Panel D']='4'
	panel_spec['Table2-3']['Panel E']='5'
	
	
	
# runscripts for table 1	    
	specs1 = sorted(panel_spec['Table1'].keys())				
	for panel1 in specs1 :

		# Illustrate simple use of run_do_script.
	    ctx(
	        features='run_do_script',
	        source='table1_main_variables.do',
	        target=[
	        		out_analysis('log', 'table1_main_variables_{}.log'.format(panel_spec['Table1'][panel1])),
	        		out_data('table1_main_variables_temp_{}.dta'.format(panel_spec['Table1'][panel1]))
	        ],
	        deps=[
	            '../library/stata/project_paths.do',
	            in_data('ajrcomment.dta')
	        ],
	        name='table1_main_variables_temp_{}'.format(panel_spec['Table1'][panel1]),
	        append=panel_spec['Table1'][panel1]
        )
	    
		# Limit to parallelism when using append because of automatic logging
	    ctx.add_group()

	
# runscripts for table 2	    
	specs = sorted(panel_spec['Table2-3'].keys())
	for panel in specs :

		# Illustrate simple use of run_do_script.
	    ctx(
	        features='run_do_script',
	        source='table2_first_stage_est.do',
	        target=[
	        		out_analysis('log', 'table2_first_stage_est_{}.log'.format(panel_spec['Table2-3'][panel])),
	        		out_data('table2_first_stage_est_temp_{}.dta'.format(panel_spec['Table2-3'][panel]))
	        ],
	        deps=[
	            '../library/stata/project_paths.do',
	            in_data('ajrcomment.dta')
	        ],
	        name='table2_first_stage_est_temp_{}'.format(panel_spec['Table2-3'][panel]),
	        append=panel_spec['Table2-3'][panel]
        )
	    
	# Limit to parallelism when using append because of automatic logging
	    ctx.add_group()

# runscripts for table 3	    
	specs = sorted(panel_spec['Table2-3'].keys())				
	for panel in specs :

		# Illustrate simple use of run_do_script.
	    ctx(
	        features='run_do_script',
	        source='table3_iv_est.do',
	        target=[
	        		out_analysis('log', 'table3_iv_est_{}.log'.format(panel_spec['Table2-3'][panel])),
	        		out_data('table3_iv_est_temp_{}.dta'.format(panel_spec['Table2-3'][panel]))
    		],
	        deps=[
	            '../library/stata/project_paths.do',
	            in_data('ajrcomment.dta')
    		],
	        name='table3_iv_est_temp_{}'.format(panel_spec['Table2-3'][panel]),
	        append=panel_spec['Table2-3'][panel]
        )
	    
	    # Limit to parallelism when using append because of automatic logging
	    ctx.add_group()
